// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Body                 string   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "chat.Message")
}

func init() {
	proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54)
}

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xce, 0x48, 0x2c,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0xa5, 0xa4, 0xd3, 0xf3, 0xf3, 0xd3,
	0x73, 0x52, 0xf5, 0xc1, 0x62, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x10, 0x25,
	0x4a, 0xb2, 0x5c, 0xec, 0xbe, 0xa9, 0xc5, 0xc5, 0x89, 0xe9, 0xa9, 0x42, 0x42, 0x5c, 0x2c, 0x49,
	0xf9, 0x29, 0x95, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x60, 0xb6, 0xd1, 0x0f, 0x46, 0x2e,
	0x6e, 0xe7, 0x8c, 0xc4, 0x92, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x0d, 0x2e, 0x8e,
	0xe0, 0xc4, 0x4a, 0x8f, 0xd4, 0x9c, 0x9c, 0x7c, 0x21, 0x5e, 0x3d, 0xb0, 0x55, 0x50, 0xed, 0x52,
	0xa8, 0x5c, 0x21, 0x03, 0x2e, 0x3e, 0x98, 0xca, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0x5c, 0xfc, 0xea,
	0x35, 0x18, 0x85, 0xec, 0xb9, 0xa4, 0x51, 0x75, 0x38, 0x65, 0xa6, 0x64, 0x16, 0xa5, 0x26, 0x97,
	0x64, 0xe6, 0xe7, 0x25, 0xe6, 0x10, 0xd2, 0x6e, 0xc0, 0x28, 0xe4, 0xc3, 0x25, 0x15, 0x9e, 0x59,
	0x92, 0x91, 0x5f, 0x5a, 0x12, 0x90, 0x58, 0x94, 0x98, 0x9b, 0x5a, 0x92, 0x5a, 0x54, 0xec, 0x98,
	0x97, 0x12, 0x94, 0x5a, 0x52, 0x5a, 0x94, 0x27, 0x24, 0xa6, 0x07, 0x09, 0x07, 0x3d, 0x58, 0x38,
	0xe8, 0xb9, 0x82, 0xc2, 0x41, 0x0a, 0x87, 0x78, 0x12, 0x1b, 0x98, 0x6f, 0x0c, 0x08, 0x00, 0x00,
	0xff, 0xff, 0xaa, 0xcf, 0xa6, 0xac, 0x51, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_SayHelloStreamClient, error)
	SayHelloStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (ChatService_SayHelloStreamBidirectionalClient, error)
	WithoutParametersAndReturn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.ChatService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SayHelloStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_SayHelloStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/chat.ChatService/SayHelloStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSayHelloStreamClient{stream}
	return x, nil
}

type ChatService_SayHelloStreamClient interface {
	Send(*Message) error
	CloseAndRecv() (*Message, error)
	grpc.ClientStream
}

type chatServiceSayHelloStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceSayHelloStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceSayHelloStreamClient) CloseAndRecv() (*Message, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) SayHelloStreamBidirectional(ctx context.Context, opts ...grpc.CallOption) (ChatService_SayHelloStreamBidirectionalClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[1], "/chat.ChatService/SayHelloStreamBidirectional", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceSayHelloStreamBidirectionalClient{stream}
	return x, nil
}

type ChatService_SayHelloStreamBidirectionalClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatServiceSayHelloStreamBidirectionalClient struct {
	grpc.ClientStream
}

func (x *chatServiceSayHelloStreamBidirectionalClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceSayHelloStreamBidirectionalClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) WithoutParametersAndReturn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/chat.ChatService/WithoutParametersAndReturn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	SayHello(context.Context, *Message) (*Message, error)
	SayHelloStream(ChatService_SayHelloStreamServer) error
	SayHelloStreamBidirectional(ChatService_SayHelloStreamBidirectionalServer) error
	WithoutParametersAndReturn(context.Context, *empty.Empty) (*empty.Empty, error)
}

// UnimplementedChatServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (*UnimplementedChatServiceServer) SayHello(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedChatServiceServer) SayHelloStream(srv ChatService_SayHelloStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStream not implemented")
}
func (*UnimplementedChatServiceServer) SayHelloStreamBidirectional(srv ChatService_SayHelloStreamBidirectionalServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHelloStreamBidirectional not implemented")
}
func (*UnimplementedChatServiceServer) WithoutParametersAndReturn(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithoutParametersAndReturn not implemented")
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SayHelloStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).SayHelloStream(&chatServiceSayHelloStreamServer{stream})
}

type ChatService_SayHelloStreamServer interface {
	SendAndClose(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatServiceSayHelloStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceSayHelloStreamServer) SendAndClose(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceSayHelloStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_SayHelloStreamBidirectional_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).SayHelloStreamBidirectional(&chatServiceSayHelloStreamBidirectionalServer{stream})
}

type ChatService_SayHelloStreamBidirectionalServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type chatServiceSayHelloStreamBidirectionalServer struct {
	grpc.ServerStream
}

func (x *chatServiceSayHelloStreamBidirectionalServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceSayHelloStreamBidirectionalServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_WithoutParametersAndReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).WithoutParametersAndReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/WithoutParametersAndReturn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).WithoutParametersAndReturn(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _ChatService_SayHello_Handler,
		},
		{
			MethodName: "WithoutParametersAndReturn",
			Handler:    _ChatService_WithoutParametersAndReturn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHelloStream",
			Handler:       _ChatService_SayHelloStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SayHelloStreamBidirectional",
			Handler:       _ChatService_SayHelloStreamBidirectional_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
